<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:ns1="nz.co.codec.flex.multicolumnform.*"
			xmlns:components="com.hillelcoren.components.*" creationComplete="searchClear()">
	<mx:Panel 	width="100%" height="100%" title="Search Registration" horizontalAlign="center" verticalAlign="middle"
				 paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10">
    <mx:Script>
        <![CDATA[
        	import mx.collections.XMLListCollection;
        	import component.DataSources.AllDataSources;
            import mx.collections.HierarchicalData;
            import mx.events.ListEvent;
            import mx.controls.Alert;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;		
            import flash.utils.Timer;
			import mx.core.Application;            

			[Bindable]
			private var branchID:String = new String();
			[Bindable]
			private var districtID:String = new String();
			[Bindable]
			private var regionID:String = new String();
									
		            
            private var delayTimer:Timer;
                        
            private var tcvIDSelected:String = new String();
                        
            public function searchClear():void {                
                tvcID.text = null;
                tvcID.validateNow();
                tvcID.text = null;
                tvcID.setCursorPosition(1);
                tvcID.prompt = "Enter TVC ID";
                fName.text = null;
                fName.validateNow();
                fName.text = null;
                fName.setCursorPosition(1);
                fName.prompt = "eg. Prem";
                lName.text = null;
                lName.validateNow();
                lName.text = null;
                lName.setCursorPosition(1);
                lName.prompt = "eg. Kumari";
                branchName.selectedItem = null;
                branchName.text = "";
                branchName.text = null;
                branchName.validateNow();
                branchName.text = null;
                branchName.prompt = "Enter branch name";
                branchID = "";
                regionName.text = null;
                regionID = "";
                districtName.text = null;
                districtID = "";
				inchargeName.text = null;
	        	fetchRegistrationStatusLabel.text = "";
	        	fetchRegistrationHBox.visible = false;                
	        	fetchRegistrationStatusLabel.visible = false; 
	        	if(adg.dataProvider != null) adg.dataProvider.removeAll(); 
	        	btnFetchDetails.enabled = false;
				component.DataSources.AllDataSources.memberMohallaSadanIndex = 0;
				component.DataSources.AllDataSources.memberMohallaSadanName = "";	        	          
            }

			public function handleClick(evt:ListEvent):void
			{
				tcvIDSelected = evt.currentTarget.selectedItem.@id;
				btnFetchDetails.enabled = true;
			}
			
			private function handleSearchChange():void 
			{
				if (delayTimer != null && delayTimer.running) 
				{
					delayTimer.stop();
				}
				
				if (branchName.searchText.length > 2) 
				{
					// if you remove below line then it kind of works
					// but it is more correct to remove all data
					// before repopulate. Really it is just holding
					// on to stale data
//					aBranchDP.removeAll();
					delayTimer = new Timer( 500, 1 );
					delayTimer.addEventListener(TimerEvent.TIMER, showComboAll);
					delayTimer.start();
					
					branchName.enabled = false;
				}
			}
			
			private function showComboAll( event:TimerEvent ):void
			{
				callService("branches.do");
			}

/*********************HTTP Service Calls ******************************/		
	        private var service:HTTPService;
	        private var serviceCalled:String = new String("");
			
			public function callService(url:String):void
			{
		            var requestObj:Object = new Object();
		            service = new HTTPService();
		            
		            serviceCalled = url;
		            
					switch (serviceCalled)
					{
						case "branches.do":	
							requestObj.BranchSearch = branchName.searchText;
							service.request = requestObj;
						break;
						case "tvc/associations/primary.do":
							requestObj.AssociateTvcId = tcvIDSelected;
							service.request = requestObj;					
						break;						
						case "tvc/search.do":
							requestObj.FirstName = fName.text;
							requestObj.LastName = lName.text;
							requestObj.Branch = branchID;
							requestObj.TvcId = tvcID.text;
							service.request = requestObj;					
						break;
						default:
							Alert.show("Unrecognized service called");
					}
		            service.url = component.DataSources.AllDataSources.hostName + url;
		            service.resultFormat = "e4x";
	
		            service.method = "GET";
		            service.addEventListener("result", httpResult);
		            service.addEventListener("fault", httpFault);
			        service.send();
	  		}                             
	
	        public function httpFault(event:FaultEvent):void {
	                var faultstring:String = event.fault.faultString;
		        	fetchRegistrationStatusLabel.text = "There was a problem fetching the requested record! Pls try including more fields in your search.";
	        		fetchRegistrationStatusLabel.visible = true;
	        		fetchRegistrationHBox.visible = true;
	        }
	
		    public function httpResult(event:ResultEvent):void
		    {
		    	switch (serviceCalled)
		    	{
		        	case "branches.do":
					    component.DataSources.AllDataSources.branchDetails = new XMLList(event.result);
						if(component.DataSources.AllDataSources.branchDetails.branches.branch.length() == 0)
						{
					    	fetchRegistrationStatusLabel.text = "There is no branch with this name. Sorry!";
							fetchRegistrationStatusLabel.visible = true;
							fetchRegistrationHBox.visible = true;						
						}
						else{
					    	branchName.dataProvider = new XMLListCollection(component.DataSources.AllDataSources.branchDetails.branches.branch);
					    	fetchRegistrationStatusLabel.text = "";
				        	fetchRegistrationHBox.visible = false;         
	        				fetchRegistrationStatusLabel.visible = false;
					    }
						branchName.enabled = true;
						branchName.setFocus();
					    branchName.search();
					break;
					case "tvc/associations/primary.do":
						var aTempXML:XML = new XML(event.result);
						component.DataSources.AllDataSources.aPrimaryTVCID = aTempXML.primary.@id;
						if(component.DataSources.AllDataSources.aPrimaryTVCID != "")
							component.DataSources.AllDataSources.hasPrimaryIDBeenFetched = true;
						else
							component.DataSources.AllDataSources.hasPrimaryIDBeenFetched = false;
					break;					
					case "tvc/search.do":
					component.DataSources.AllDataSources.aTVCRegistration = new XMLList(event.result);
					if(component.DataSources.AllDataSources.aTVCRegistration.registrations.registration.length() == 0)
					{
				    	fetchRegistrationStatusLabel.text = "Your search returned no results! Pls try including more fields in your search.";
						fetchRegistrationStatusLabel.visible = true;
						fetchRegistrationHBox.visible = true;						
					}
					btnSubmit.enabled = true;
					break;					
					default:
						Alert.show("Unrecognized service called");        		
		    	}
			}
/*********************HTTP Service Calls ******************************/

	public function assignID():void
	{
		if(branchName.selectedItem != null)
		{
			branchID = branchName.selectedItem.@id;
			districtID = branchName.selectedItem.@districtId;
			regionID = branchName.selectedItem.@regionId;
		}
	}
	
	private function invokeSearch():void
	{
    	btnSubmit.enabled = false;
    	fetchRegistrationStatusLabel.text = "";
    	fetchRegistrationStatusLabel.visible = false;
    	fetchRegistrationHBox.visible = false;		
		if((fName.text != "") || (lName.text != "") || (branchID != "") || (tvcID.text != "")){
			callService('tvc/search.do');
		}
	}
	
	private function proceedToNextStep():void
	{
 		if(component.DataSources.AllDataSources.aTVCRegistration.registrations.registration.length() != 0)
		{
			var aTempVar:XML = new XML();
/* Change made on 5-Feb to take care of anything-to-PQ transitions */			
			component.DataSources.AllDataSources.isLicenseeDetailsAvailable = false;
/* Change made on 5-Feb to take care of anything-to-PQ transitions */			
/*			component.DataSources.AllDataSources.selectedTVCRegistrationEntry = 
				component.DataSources.AllDataSources.aSampleTVCRegistration.registration[0];
*/
			component.DataSources.AllDataSources.isTVCAssociate = false;
			component.DataSources.AllDataSources.aPrimaryTVCID = "";
			component.DataSources.AllDataSources.hasPrimaryIDBeenFetched = false;

			component.DataSources.AllDataSources.selectedTVCRegistrationEntry = 
				new XML(component.DataSources.AllDataSources.aTVCRegistration.registrations.registration.(@id == tcvIDSelected));

			aTempVar = component.DataSources.AllDataSources.selectedTVCRegistrationEntry;

			if(component.DataSources.AllDataSources.selectedTVCRegistrationEntry.@permission == "")
				component.DataSources.AllDataSources.isTVCRegistrationSplPermission = false;
			else
				component.DataSources.AllDataSources.isTVCRegistrationSplPermission = true;

			if(component.DataSources.AllDataSources.selectedTVCRegistrationEntry.@licenseeName == "")
				component.DataSources.AllDataSources.isLicenseeDetailsAvailable = false;
			else{
				component.DataSources.AllDataSources.licenseeDetails = component.DataSources.AllDataSources.selectedTVCRegistrationEntry.@licenseeName;
				component.DataSources.AllDataSources.isLicenseeDetailsAvailable = true;
			}
/* for accomodating both Fetch Details and Smart Assist to both make changes to the Local Address Field */
//			component.DataSources.AllDataSources.editRegLocalAddressString = component.DataSources.AllDataSources.selectedTVCRegistrationEntry.@localAddress;									
			component.DataSources.AllDataSources.smartAssistLAddressSelected = component.DataSources.AllDataSources.selectedTVCRegistrationEntry.@localAddress;									
/* for accomodating both Fetch Details and Smart Assist to both make changes to the Local Address Field */
				
/* For Edit Registration MohallaSadan Selected Index Problem */				
			if(component.DataSources.AllDataSources.selectedTVCRegistrationEntry.@accoType == 'Sadan'){
/*				component.DataSources.AllDataSources.memberMohallaSadanIndex = component.DataSources.AllDataSources.accoType.accomodation.type.(@name == component.DataSources.AllDataSources.selectedTVCRegistrationEntry.@accoType).field.(@name == component.DataSources.AllDataSources.selectedTVCRegistrationEntry.@sadan).@id;
				component.DataSources.AllDataSources.memberMohallaSadanName = component.DataSources.AllDataSources.selectedTVCRegistrationEntry.@sadan;
*/				component.DataSources.AllDataSources.smartAssistAccoDetailsIndex = component.DataSources.AllDataSources.accoType.accomodation.type.(@name == component.DataSources.AllDataSources.selectedTVCRegistrationEntry.@accoType).field.(@name == component.DataSources.AllDataSources.selectedTVCRegistrationEntry.@sadan).@id;
				component.DataSources.AllDataSources.memberMohallaSadanName = component.DataSources.AllDataSources.selectedTVCRegistrationEntry.@sadan;							
			}
			else{
/*				component.DataSources.AllDataSources.memberMohallaSadanIndex = component.DataSources.AllDataSources.accoType.accomodation.type.(@name == component.DataSources.AllDataSources.selectedTVCRegistrationEntry.@accoType).field.(@name == component.DataSources.AllDataSources.selectedTVCRegistrationEntry.@colony).@id;
				component.DataSources.AllDataSources.memberMohallaSadanName = component.DataSources.AllDataSources.selectedTVCRegistrationEntry.@colony;	
*/				component.DataSources.AllDataSources.smartAssistAccoDetailsIndex = component.DataSources.AllDataSources.accoType.accomodation.type.(@name == component.DataSources.AllDataSources.selectedTVCRegistrationEntry.@accoType).field.(@name == component.DataSources.AllDataSources.selectedTVCRegistrationEntry.@colony).@id;
				component.DataSources.AllDataSources.memberMohallaSadanName = component.DataSources.AllDataSources.selectedTVCRegistrationEntry.@colony;	
			}
/* For Edit Registration MohallaSadan Selected Index Problem */				
			if((Application.application.aHandleToAccount.currentApplicationActivityState == "TVC") &&
				(Application.application.aHandleToAccount.currentApplicationSubActivityState == "TVC_EditReg")){
					parentDocument.TaskRTViewStack.selectedIndex = 4;	
					if(parentDocument.editRegistration.editRegistrationResultHBox != null){
						parentDocument.editRegistration.editRegistrationResultHBox.visible = false;
						parentDocument.editRegistration.editRegistrationStatusLabel.text = "";
					}	
				}
			else if((Application.application.aHandleToAccount.currentApplicationActivityState == "TVC") &&
				(Application.application.aHandleToAccount.currentApplicationSubActivityState == "TVC_SearchReg"))
				parentDocument.TaskRTViewStack.selectedIndex = 3;

/* For Add/Modify Associations Functionality in Edit Registration */
			if(component.DataSources.AllDataSources.selectedTVCRegistrationEntry.@isAssociate == "true")
				component.DataSources.AllDataSources.isTVCAssociate = true;
			else
				component.DataSources.AllDataSources.isTVCAssociate = false; 
										
			if(component.DataSources.AllDataSources.isTVCAssociate)
				callService('tvc/associations/primary.do');

/* Now decide whether the Licensee Name and Relationship elements need to be shown or not */
			if(!component.DataSources.AllDataSources.isTVCAssociate && (component.DataSources.AllDataSources.selectedTVCRegistrationEntry.@accoType == 'Private Quarters'))
				component.DataSources.AllDataSources.shouldLicenseeDetailsBeShown = true;
			else
				component.DataSources.AllDataSources.shouldLicenseeDetailsBeShown = false;
/* Now decide whether the Licensee Name and Relationship elements need to be shown or not */

/* For controlling the visibility of elements that should be shown incase member is Jigyasu or Uninitiated */
			if(component.DataSources.AllDataSources.selectedTVCRegistrationEntry.@initStatus == "Uninitiated"){
				component.DataSources.AllDataSources.isMemberInitiated = false;
				component.DataSources.AllDataSources.isMemberJigyasu = false;
				component.DataSources.AllDataSources.isMemberUninitiated = true;
			}
			else if(component.DataSources.AllDataSources.selectedTVCRegistrationEntry.@initStatus == "Jigyasu"){
				component.DataSources.AllDataSources.isMemberInitiated = false;
				component.DataSources.AllDataSources.isMemberJigyasu = true;
				component.DataSources.AllDataSources.isMemberUninitiated = false;
			}
			else if(component.DataSources.AllDataSources.selectedTVCRegistrationEntry.@initStatus == "Initiated"){
				component.DataSources.AllDataSources.isMemberInitiated = true;
				component.DataSources.AllDataSources.isMemberJigyasu = false;
				component.DataSources.AllDataSources.isMemberUninitiated = false;				
			}
/* Change added on 06-Feb-2011 to address the smart assist button not getting shown if entry has Sadan */			
			if(component.DataSources.AllDataSources.selectedTVCRegistrationEntry.@accoType == 'Private Quarters' ||
				component.DataSources.AllDataSources.selectedTVCRegistrationEntry.@accoType == 'Sabha Quarters' ||
				component.DataSources.AllDataSources.selectedTVCRegistrationEntry.@accoType == 'Sadan')
				component.DataSources.AllDataSources.shouldSmartAssistButtonBeEnabled = true;
			else
				component.DataSources.AllDataSources.shouldSmartAssistButtonBeEnabled = false;
/* Change added on 06-Feb-2011 to address the smart assist button not getting shown if entry has Sadan */			
		}		
	}

		private function doSearch(event:KeyboardEvent):void
		{
			if (event.keyCode == Keyboard.ENTER)
			    {
			        invokeSearch();
			    }			
		}			           
        ]]>
    </mx:Script>
    <mx:VBox height="60%" width="100%" horizontalAlign="center" verticalAlign="middle" >
		<mx:VBox width="100%" height="50%" horizontalAlign="center" verticalAlign="middle" borderStyle="solid">
			<ns1:MultiColumnForm numColumns="2" width="100%" height="100%">
			    <ns1:MultiColumnFormItem label="TVC ID:">			
			        <components:PromptTextInput id="tvcID" prompt="Enter TVC ID" width="100%"/>
			    </ns1:MultiColumnFormItem>
			    <ns1:MultiColumnFormItem/>
			    <mx:HRule width="100%"/>			    
			    <ns1:MultiColumnFormItem label="First Name:">
			        <components:PromptTextInput id="fName" prompt="eg. Prem" width="{tvcID.width}"/>
			    </ns1:MultiColumnFormItem>
			    <ns1:MultiColumnFormItem label="Last Name:">			
			        <components:PromptTextInput id="lName" prompt="eg. Kumari" width="{tvcID.width}"/>
			    </ns1:MultiColumnFormItem>
			    <mx:HRule width="100%"/>			    
			    <ns1:MultiColumnFormItem label="Branch:">
					<components:AutoComplete 	id="branchName" width="{tvcID.width}"
												labelField="@name" selectedItemStyleName="none" prompt="Enter branch name"
												searchChange="handleSearchChange()" change="assignID()"	backspaceAction="remove"/>
			    </ns1:MultiColumnFormItem>		    
			    <ns1:MultiColumnFormItem label="Branch Sec. Name:">
					<mx:TextInput id="inchargeName" width="{tvcID.width}" text="{(branchName.selectedItem).@secretary}" editable="false"
									toolTip="{(branchName.selectedItem).@secretary}"/>
			    </ns1:MultiColumnFormItem>		    	
			    <ns1:MultiColumnFormItem label="District:">
					<mx:TextInput id="districtName" width="{tvcID.width}" text="{(branchName.selectedItem).@districtSuffix}" 
								editable="false" toolTip="{(branchName.selectedItem).@districtName}"/>
			    </ns1:MultiColumnFormItem>			    			    
			    <ns1:MultiColumnFormItem label="Region:">
					<mx:TextInput id="regionName" width="{tvcID.width}" text="{(branchName.selectedItem).@regionSuffix}" editable="false"
									toolTip="{(branchName.selectedItem).@regionName}"/>
			    </ns1:MultiColumnFormItem>
		</ns1:MultiColumnForm>
		<mx:ControlBar>
			<mx:HBox width="100%" height="100%">
				<mx:Button label="Clear" click="{searchClear()}"/>
				<mx:Spacer width="100%"/>			
				<mx:Button id="btnSubmit" label="Search" click="{invokeSearch()}" keyDown="doSearch(event)" focusEnabled="true"/>				
			</mx:HBox>
		</mx:ControlBar>		
		</mx:VBox>   	
    </mx:VBox>
    <mx:HBox id="fetchRegistrationHBox" width="100%" horizontalAlign="center" verticalAlign="middle" 
    			visible="false" borderStyle="solid" color="red">
    	<mx:Label id="fetchRegistrationStatusLabel" visible="false"/> 
    </mx:HBox>    
	<mx:VBox width="100%" height="50%" horizontalAlign="center" verticalAlign="middle" borderStyle="solid">
			<mx:DataGrid 	id="adg" width="100%" height="100%" 
									dataProvider="{component.DataSources.AllDataSources.aTVCRegistration.registrations.registration}" 
									fontSize="10" itemClick="handleClick(event)">
				<mx:columns>
					<mx:DataGridColumn dataField="@id" headerText="ID" textAlign="center"/>
					<mx:DataGridColumn dataField="@fName" headerText="First Name" textAlign="center"/>
					<mx:DataGridColumn dataField="@lName" headerText="Last Name" textAlign="center"/>
					<mx:DataGridColumn dataField="@region" headerText="Region" textAlign="center"/>
					<mx:DataGridColumn dataField="@district" headerText="District" textAlign="center"/>			
					<mx:DataGridColumn dataField="@branch" headerText="Branch" textAlign="center"/>
				</mx:columns>
			</mx:DataGrid> 
		<mx:ControlBar>
			<mx:HBox width="100%" height="100%">		
				<mx:Button id="btnFetchDetails" label="Fetch Details" click="{proceedToNextStep()}" enabled="false"/>				
			</mx:HBox>
		</mx:ControlBar>			   	
    </mx:VBox>   
	</mx:Panel>
</mx:Canvas>