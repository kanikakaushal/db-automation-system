<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas 	xmlns:mx="http://www.adobe.com/2006/mxml" 
			xmlns:compsEvent="component.home.event.*"
			xmlns:compsActivity="component.home.activityviews.*">
	<mx:Script>
			<![CDATA[
			import component.DataSources.AllDataSources;			
 			import mx.events.ItemClickEvent;
 			import mx.controls.Alert;
 			import mx.core.Application;
        	import mx.containers.HBox;
            import mx.containers.ControlBar;
            import mx.containers.Panel;
            import mx.containers.VBox;
            import mx.controls.Button;
            import mx.controls.Label;
            import mx.controls.Spacer;
            import mx.controls.Image;
            import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;    		
			import mx.rpc.http.HTTPService;
            import mx.managers.PopUpManager;
			import component.DataSources.AllImageResources;
             			
 			private var panel:Panel;
 			[Bindable]
 			private var welcomeString:String = "";

/*********************HTTP Service Calls ******************************/		

	        private var service:HTTPService;
	        private var serviceCalled:String = new String("");
					
			public function callService(url:String):void
			{
		            service = new HTTPService();
		            
		            serviceCalled = url;
		            
					switch (serviceCalled)
					{
						case "events/list.do":
						break;
						case "logout.do":
						break;
						default:
							Alert.show("Unrecognized service called");
					}
					service.url = component.DataSources.AllDataSources.hostName + url;
		            service.resultFormat = "e4x";

		            service.method = "GET";
		            service.addEventListener("result", httpResult);
		            service.addEventListener("fault", httpFault);
			        service.send();
	  		}                             

	        public function httpFault(event:FaultEvent):void {
	                var faultstring:String = event.fault.faultString;
	                Alert.show(faultstring);
	        }

        public function httpResult(event:ResultEvent):void
        {
        	switch (serviceCalled)
        	{
	        	case "events/list.do":
	        		component.DataSources.AllDataSources.myEvents = new XMLList(event.result);
	        		homeViewStack.selectedIndex = 1;
	        		refreshChildDataProviders();
				break;
				case "logout.do":
					parentDocument.aHandleToAccount.resetAllAccountSettings();			
					parentDocument.myViewStack.selectedIndex = 0;
					parentDocument.stxHome.homeViewStack.selectedIndex = 0;
				break;
				default:
					Alert.show("Unrecognized service called");        		
        	}
		}
 			 			
			public function handleClick(evt:ItemClickEvent):void
			{
  				switch(evt.item.toString())
				{
					case 'Events':
						callService("events/list.do");
					break;
					case 'Activities':
					if(activityLauncher.activityViewStack != null){
						activityLauncher.taskLauncher.TaskRTViewStack.selectedIndex = 0;
						activityLauncher.activityViewStack.selectedIndex = 0;
					}
					if(Application.application.aHandleToAccount.myCurrEventID == "")
					{
						createPopupPanelElements("eventNotSet");
					}
					else
						homeViewStack.selectedIndex = 2;
					break;
					case 'My Account':
					homeViewStack.selectedIndex = 0;
					break;
					case 'Logout':
					callService("logout.do");
					break;
					default:
					Alert.show("Unidentified container:" + (evt.item.toString()));
				}
			}
			
			private function createPopupPanelElements(currentState:String):void
			{
				var vb:VBox = new VBox();
				var hb:HBox = new HBox();
				var aLabel:Label = new Label();
				var image:Image = new Image();
	
				var cb:ControlBar = new ControlBar();
				var b1:Button = new Button();
			
                b1.label = "OK";
                b1.addEventListener(MouseEvent.CLICK, closePopUp);

				cb.setStyle("horizontalAlign", "center");
				cb.setStyle("verticalAlign", "middle");
                cb.addChild(b1);

                panel = new Panel();
                panel.setStyle("horizontalAlign", "center");
                panel.setStyle("verticalAlign", "middle");
                panel.width = 300;
                panel.height = 180;
                

				if (currentState == "eventNotSet")
				{
					aLabel.text = "Error! Event not selected";
					image.source = component.DataSources.AllImageResources.error;
					aLabel.setStyle("color", "red");
					panel.setStyle("color", "red");
                	panel.title = "Error";					
				}
				else if(currentState == "eventSet")
				{
					image.source = component.DataSources.AllImageResources.success;
					aLabel.text = "Proceeding with Event: " + Application.application.aHandleToAccount.myCurrEventID;
					panel.title = "Default Event Details";
				}
				hb.setStyle("horizontalAlign", "center");
				hb.setStyle("verticalAlign", "middle");					
				hb.addChild(image);
				hb.addChild(aLabel)
				vb.setStyle("paddingBottom", 5);
				vb.setStyle("paddingLeft", 5);
				vb.setStyle("paddingRight", 5);
				vb.setStyle("paddingTop", 5);
				vb.setStyle("horizontalAlign", "center");
				vb.setStyle("verticalAlign", "middle");				
				vb.addChild(hb);										

                panel.addChild(vb);
                panel.addChild(cb);

                PopUpManager.addPopUp(panel, this, true);
                PopUpManager.centerPopUp(panel);
            }

            private function closePopUp(evt:MouseEvent):void {
                PopUpManager.removePopUp(panel);
            }
			
			public function refreshChildDataProviders():void
			{
				if (homeViewStack.selectedIndex == 1){
					if(eventSelection.initialized == true)
						eventSelection.refreshChildDataProviders();
				}				
				else if(homeViewStack.selectedIndex == 2){
					if(activityLauncher.avblActivities !== null)
						activityLauncher.avblActivities.updateDS();
				}
			}
			
		]]>
	</mx:Script>

	<mx:Canvas id="homeCanvas" width="100%" height="100%" fontSize="12">
		<mx:VBox id="homeCanvasVBox" width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
			<mx:ApplicationControlBar id="acbTop" dock="true" width="100%" height="5%" horizontalAlign="center">
		        <mx:HBox width="100%" >
		        	<mx:Label id="welcomeText" text="{component.DataSources.AllDataSources.welcomeString}"/>
		        	<mx:Spacer width="100%"/>
		        	<mx:LinkBar id="aLinkBar" dataProvider="{['Events', 'Activities','My Account','Logout']}"  
		        				fontWeight="normal" itemClick="handleClick(event)"/>
		        </mx:HBox>
			</mx:ApplicationControlBar>
			<mx:Canvas id="aFormContainer" width="100%" height="90%" creationPolicy="queued">
				<mx:ViewStack id="homeViewStack" width="100%" height="100%" change="refreshChildDataProviders()">
					<mx:Canvas id="aBlankSpace" width="100%" height="100%"/>
					<compsEvent:EventManagement id="eventSelection" creationIndex="2"/>
					<compsActivity:ActivityLauncher id="activityLauncher" creationIndex="1"/>
				</mx:ViewStack>
			</mx:Canvas>
			<mx:ApplicationControlBar width="100%" height="5%" horizontalAlign="center">
		        <mx:Label text="&#169; Radhasoami Satsang Sabha, Dayalbagh {new Date().fullYear}"/>
		        <mx:Spacer width="50%" />
		        <mx:Label text="Shiromani Nagar Committee: Temporary Visitor Management"/>
		        <mx:Spacer width="100%"/>
		        <mx:Label text="{component.DataSources.AllDataSources.currEventDetails}" 
		        				toolTip="{Application.application.aHandleToAccount.currEventName}"/>
			</mx:ApplicationControlBar>
		</mx:VBox>
	</mx:Canvas>	
	<mx:DateFormatter id="dateFormatter" formatString="EEE DD/MM/YYYY"/>
</mx:Canvas>